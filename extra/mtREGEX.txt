---trova parola preceduta da ...---> (?<=[...])WORD
es. tutte le occurrence di Jimmy a inizio paragrafo (<p>)
REGEX: (?<=<p>)Jimmy

es. qualsiasi parola all'inizio di un paragrafo:
REGEX: (?<=<p>)\w+

es. un nome proprio preceduto da un tag
REGEX: (?<=>)Jimmy
tag con attributo (es. <addName type="nickname">Ellie):
REGEX: (?<="\w+">)Ellie 

----trova parola seguita da ...---> WORD(?=[...])
es. parola seguita da tag
REGEX: Ellie(?=<)
es. parola seguita da spazio o newline
REGEX: Ellie(?=\s|\n)

----trova parola preceduta da ... e seguita da ...---> (?<=[...])WORD(?=[...]) (vedi sopra)

----trova parola non preceduta da ...---> (?<![...])WORD

----trova parola non seguita da ...---> WORD(?![...])

----trova una tra le alternative---> (A|B|C|D)

----trova una tra le alternative---> (A|B|C|D)

----esempi con nomi (vedi file MT_Regex per cercare nomi)--->
REGEX: Jeff(erson)?(\sT\.)?(\sMerivale)?
(trova nel testo le occurrences di Jeff, Jefferson, Jeff Merivale, Jefferson Merivale, Jefferson T. Merivale etc.)

---escaping symbols---> \
Es. trova occurrences di Mr.
REGEX: Mr\.


---ESEMPIO PER SOSTITUIRE CON + TAGS:---
es. vuoi aggiungere i tag <persName ref="#GeorgeBaldwin"></persName> a tutte le occurrences di: "George", "George Baldwin", "Mr. Baldwin":

1. FIND: usa regex dal file MT_Regex AGGIUNGENDO PARENTESI ALL'INIZIO E ALLA FINE PER CREARE UN GRUPPO: 
    (George(\sBaldwin)?|(Mr\.)?(?<!\w|Mrs\.\s)(?<!George)(Baldwin)+)
    Spiegazione: trova le occurrences di "George", eventualmente seguite da "Baldwin", oppure trova le occurrences del cognome "Baldwin" eventualmente preceduto da Mr., ma non da Mrs. Il gruppo: (?<!George) serve solo per trovare le occurrences diverse da #GeorgeBaldwin. PERO': regex del file MT_Regex non sono molto accurate, bisogna sempre controllare parola per parola (oppure mi ci metto ancora un po' e le miglioro, vediamo), CONTROLLARE SEMPRE LE PAROLE PRIMA DI SOSTITUIRE

2. REPLACE WITH: 
    <persName ref="#GeorgeBaldwin">$1</persName>
    $1 fa riferimento al primo gruppo nella regex (in questo esempio c'è un unico grande gruppo dentro alle parentesi esterne, quindi)


_____simboli:_____________________________________________________
+ --> da 1 a infinito numero di occurrences della parola/carattere precedente (Jimmy(\sHerf)+: trova tutte le occurrences di "Jimmy Herf" nel testo)

* --> da 0 a infinito numero di occurrences (Jimmy(\sHerf)+: trova tutte le occurrences di "Jimmy" e, se presenti, di "Jimmy Herf" nel testo)

? --> da 0 a 1 occurrences (Jimmy(\sHerf)+: trova tutte le occurrences di "Jimmy" e, se presenti, di "Jimmy Herf" nel testo -- come sopra ma usando ? eventuali ripetizioni non vengono considerate, es. Jimmy HerfHerfHerf non sarebbe un match)

{n} --> per specificare numero preciso di occurrences da cercare, es. (ma){2}--> "mama", but ma{2}--> "maa"

{n,} --> n o più occurrences dell'elemento precedente

RICORDA: usa parentesi per raggruppare altrimenti +,*,?, {n} faranno riferimento solo all'ultimo carattere della parola

^ --> eccezione: [^abc] Matches any character except for an a, b or c;
                 [^a-z] Matches any characters except those in the range a-z.

. --> qualsiasi carattere; 

\S --> Matches anything other than a space, tab or newline.

\s --> any whitespace character (also tab & newline)

\w --> any word character

\W --> any non-word character

\ --> escape per i simboli che hanno un significato come regex, es. "."

\d --> qualsiasi numero

\D --> tutto tranne i numeri






